#transformation
df_aus$date = as.Date(df_aus$date)
df_aus$Price = as.numeric(gsub(",","",df_aus$Price))
df_aus
#glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
df_aus = df_aus[order(as.Date(df_aus$date, format="%d/%m/%Y")),]
df_aus
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
df_aus_subset = df_aus %>% select(Price, new_deaths)
df_aus_subset
M0 = lm(Price ~ new_deaths, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests)) + geom_point() + ggtitle("Prices of stocks and against new tests (Smoothed)") + ylab("New Rests") + xlab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M0 = lm(Price ~ nes_tests
, data = df_aus_subset) # Null model
df_aus_subset = df_aus %>% select(Price, nes_tests)
df_aus_subset = df_aus %>% select(Price, new_tests)
df_aus_subset
M0 = lm(Price ~ new_tests
, data = df_aus_subset) # Null model
summary(M0)
df_aus_subset = df_aus %>% select(Price, new_vacinations)
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M0 = lm(Price ~ new_vaccinations
, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests_smoothed)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
#Dropping NA
covid_clean = covid %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, weekly_icu_admissions_per_million, weekly_icu_admissions)
#This code changes the negative case values in the data set to zero
covid_clean$new_cases[covid_clean$new_cases < 0] <- 0
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, new_tests_smoothed)
#This code changes the negative case values in the data set to zero
covid_clean_AUS$new_cases[covid_clean_AUS$new_cases < 0] <- 0
view(covid_clean_AUS)
#glimpse(covid_clean)
#covid_clean$date = as.Date(covid_clean$date)
#max(covid_clean$date)
#unique(covid_clean$location)
# using a copy just in case
covid2 <- covid_clean_AUS
#sp500$Date = mdy(sp500$Date)
#TOPIX$Date = mdy(TOPIX$Date)
ASX200$date = mdy(ASX200$Date)
#NSEI$Date = mdy(NSEI$Date)
#SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations, new_tests, population, population_density)
#sp500$Date <- as.character(sp500$Date)
#TOPIX$Date <- as.character(TOPIX$Date)
ASX200$date <- as.character(ASX200$date)
#NSEI$Date <- as.character(NSEI$Date)
#SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
#colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
#covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
#covid_IND <- covid2 %>% filter(location == "India")
#covid_JPN <- covid2 %>% filter(location == "Japan")
#covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
#df_1 = inner_join(sp500, covid_US, by = "Date")
#df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "date")
#df_4 = inner_join(NSEI, covid_IND, by = "Date")
#df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
#covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
#transformation
df_aus$date = as.Date(df_aus$date)
df_aus$Price = as.numeric(gsub(",","",df_aus$Price))
df_aus
#glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
df_aus = df_aus[order(as.Date(df_aus$date, format="%d/%m/%Y")),]
df_aus
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
df_aus_subset = df_aus %>% select(Price, new_deaths)
df_aus_subset
M0 = lm(Price ~ new_deaths, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus_subset, mapping = aes(x = Price, y = new_deaths)) + geom_point() + ggtitle("Prices of stocks and against new death (Smoothed)") + ylab("New deaths") + xlab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M0 = lm(Price ~ new_vaccinations
, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus, mapping = aes(x = Price, y = new_vaccinations)) + geom_point() + ggtitle("Prices of stocks and against new vaccinations (Smoothed)") + ylab("New vaccinations") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests_smoothed)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
# using a copy just in case
covid2 <- covid_clean_AUS
#sp500$Date = mdy(sp500$Date)
#TOPIX$Date = mdy(TOPIX$Date)
ASX200$date = mdy(ASX200$Date)
#NSEI$Date = mdy(NSEI$Date)
#SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations, new_tests, population, population_density, new_tests_smoothed)
#sp500$Date <- as.character(sp500$Date)
#TOPIX$Date <- as.character(TOPIX$Date)
ASX200$date <- as.character(ASX200$date)
#NSEI$Date <- as.character(NSEI$Date)
#SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
#colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
#covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
#covid_IND <- covid2 %>% filter(location == "India")
#covid_JPN <- covid2 %>% filter(location == "Japan")
#covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
#df_1 = inner_join(sp500, covid_US, by = "Date")
#df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "date")
#df_4 = inner_join(NSEI, covid_IND, by = "Date")
#df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
#covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
#transformation
df_aus$date = as.Date(df_aus$date)
df_aus$Price = as.numeric(gsub(",","",df_aus$Price))
df_aus
#glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
df_aus = df_aus[order(as.Date(df_aus$date, format="%d/%m/%Y")),]
df_aus
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
df_aus_subset = df_aus %>% select(Price, new_deaths)
df_aus_subset
M0 = lm(Price ~ new_deaths, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus_subset, mapping = aes(x = Price, y = new_deaths)) + geom_point() + ggtitle("Prices of stocks and against new death (Smoothed)") + ylab("New deaths") + xlab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M0 = lm(Price ~ new_vaccinations
, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus, mapping = aes(x = Price, y = new_vaccinations)) + geom_point() + ggtitle("Prices of stocks and against new vaccinations (Smoothed)") + ylab("New vaccinations") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests_smoothed)) + geom_point() + ggtitle("Prices of stocks and against new tests") + ylab("New Rests") + xlab("Price")
#Dropping NA
covid_clean = covid %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, weekly_icu_admissions_per_million, weekly_icu_admissions)
#This code changes the negative case values in the data set to zero
covid_clean$new_cases[covid_clean$new_cases < 0] <- 0
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests)
#This code changes the negative case values in the data set to zero
covid_clean_AUS$new_cases[covid_clean_AUS$new_cases < 0] <- 0
view(covid_clean_AUS)
#glimpse(covid_clean)
#covid_clean$date = as.Date(covid_clean$date)
#max(covid_clean$date)
#unique(covid_clean$location)
# using a copy just in case
covid2 <- covid_clean_AUS
#sp500$Date = mdy(sp500$Date)
#TOPIX$Date = mdy(TOPIX$Date)
ASX200$date = mdy(ASX200$Date)
#NSEI$Date = mdy(NSEI$Date)
#SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations, new_tests, population, population_density)
#sp500$Date <- as.character(sp500$Date)
#TOPIX$Date <- as.character(TOPIX$Date)
ASX200$date <- as.character(ASX200$date)
#NSEI$Date <- as.character(NSEI$Date)
#SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
#colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
#covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
#covid_IND <- covid2 %>% filter(location == "India")
#covid_JPN <- covid2 %>% filter(location == "Japan")
#covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
#df_1 = inner_join(sp500, covid_US, by = "Date")
#df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "date")
#df_4 = inner_join(NSEI, covid_IND, by = "Date")
#df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
#covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
#transformation
df_aus$date = as.Date(df_aus$date)
df_aus$Price = as.numeric(gsub(",","",df_aus$Price))
df_aus
#glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
df_aus = df_aus[order(as.Date(df_aus$date, format="%d/%m/%Y")),]
df_aus
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
df_aus_subset = df_aus %>% select(Price, new_deaths)
df_aus_subset
M0 = lm(Price ~ new_deaths, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus_subset, mapping = aes(x = Price, y = new_deaths)) + geom_point() + ggtitle("Prices of stocks and against new death (Smoothed)") + ylab("New deaths") + xlab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M0 = lm(Price ~ new_vaccinations
, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus, mapping = aes(x = Price, y = new_vaccinations)) + geom_point() + ggtitle("Prices of stocks and against new vaccinations (Smoothed)") + ylab("New vaccinations") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = new_tests)) + geom_point() + ggtitle("Prices of stocks against new tests") + ylab("New Rests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population)) + geom_point() + ggtitle("Prices of stocks against new tests") + ylab("New Rests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population)) + geom_point() + ggtitle("Prices of stocks against new tests") + ylab("New tests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population_density)) + geom_point() + ggtitle("Prices of stocks against new tests") + ylab("New tests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population)) + geom_point() + ggtitle("Prices of stocks against population") + ylab("New tests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population_density)) + geom_point() + ggtitle("Prices of stocks against population density") + ylab("New tests") + xlab("Price")
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_cases))
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vacinatioins)) + geom_line(aes(x=date, y = new_tests), color = "blue") + geom_line(aes(x=date, y = population), color = "green")
ggploty(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vacinatioins)) + geom_line(aes(x=date, y = new_tests), color = "blue") + geom_line(aes(x=date, y = population), color = "green")
ploty(p1)
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations)) + geom_line(aes(x=date, y = new_tests), color = "blue") + geom_line(aes(x=date, y = population), color = "green")
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations)) + geom_line(aes(x=date, y = new_tests), color = "blue")
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations)) + geom_line(aes(x=date, y = new_tests), color = "light blue")
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "light red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue")
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue")
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") + theme_bw()
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price), color = "light blue") + theme_bw()
ggplotly(p1)
summary(df_aus$Price)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price), color = "light blue") +
scale_y_continuous(breaks=pretty_breaks(5),sec.axis = sec_axis( ~rescale(.,c(6500,7500)),name = "Categroy",labels=sprintf("%d%%",(0:5)*10))) + theme_bw()
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library("scales")
library("magrittr")
library("tidyr")
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price), color = "light blue") +
scale_y_continuous(breaks=pretty_breaks(5),sec.axis = sec_axis( ~rescale(.,c(6500,7500)),name = "Categroy",labels=sprintf("%d%%",(0:5)*10))) + theme_bw()
ggplotly(p1)
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price), color = "light blue") +
scale_y_continuous(breaks=pretty_breaks(5)) + theme_bw()
ggplotly(p1)
df_aus$Price_mul10 = df_aus$Price*10
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul10 = df_aus$Price*100
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul10), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul10 = df_aus$Price*10
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul10), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul15 = df_aus$Price*15
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul10), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul50 = df_aus$Price*50
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul50), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul50 = df_aus$Price*30
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul50), color = "light blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul30 = df_aus$Price*30
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul50), color = "blue") + theme_bw()
ggplotly(p1)
df_aus$Price_mul30 = df_aus$Price*30
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul30), color = "blue") + theme_bw()
ggplotly(p1)
colnames(df_aus)
df_aus$Price_mul30 = df_aus$Price*30
colnames(df_aus)
df_aus = df_aus[ , -which(names(df_aus) %in% c("Price_mul15","Price_mul10", "Price_mul50"))]
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul30), color = "blue") + theme_bw()
ggplotly(p1)
write.csv(df_aus,"df_aus.csv")
df_aus$Price_mul30 = df_aus$Price*30
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue") +
geom_line(aes(x=date, y = Price_mul30), color = "blue") + theme_bw()
ggplotly(p1)
ggplot(data = df_aus, mapping = aes(x = Price, y = population)) + geom_point() + ggtitle("Prices of stocks against population") + ylab("New tests") + xlab("Price")
ggplot(data = df_aus, mapping = aes(x = Price, y = population_density)) + geom_point() + ggtitle("Prices of stocks against population density") + ylab("New tests") + xlab("Price")
summary(df_aus$Price)
ggplot(data = df_aus, mapping = aes(x = date, y = population_density)) + geom_line() + ggtitle("Prices of stocks against population density") + ylab("New tests") + xlab("Price")
M = lm(Price ~ new_tests + new_tests + new_vaccinations
, data = df_aus)
library(ggfortify)
autoplot(M, which = 1:2)
df_aus_subset = df_aus %>% select(Price, new_deaths)
df_aus_subset
M0 = lm(Price ~ new_deaths, data = df_aus_subset) # Null model
summary(M0)
ggplot(data = df_aus_subset, mapping = aes(x = Price, y = new_deaths)) + geom_point() + ggtitle("Prices of stocks and against new death") + ylab("New deaths") + xlab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M1 = lm(Price ~ new_vaccinations
, data = df_aus_subset) # Null model
summary(M1)
df_aus_subset = df_aus %>% select(Price, new_tests)
df_aus_subset
M2 = lm(Price ~ new_tests
, data = df_aus_subset) # Null model
summary(M2)
autoplot(M0, which = 1:2)
autoplot(M1, which = 1:2)
autoplot(M2, which = 1:2)
hp = readr::read_csv("https://raw.githubusercontent.com/DATA2002/data/master/boston.csv")
library("tidyverse")
library("ggplot2")
library("dplyr")
library("janitor")
library("knitr")
library("qtlcharts")
library("GGally")
library(caret)
hp = readr::read_csv("https://raw.githubusercontent.com/DATA2002/data/master/boston.csv")
hp = remove_empty(hp)
glimpse(hp)
M0 = lm(MEDV ~ 1, data = hp) # Null model
M1 = lm(MEDV ~ ., data = hp) # Full model
step.back = step(M1, direction = "backward", trace = FALSE)
summary(step.back)
step.fwd = step(M0, scope = list(lower = M0, upper = M1), direction = "forward", trace = FALSE)
summary(step.fwd)
library(ggfortify)
autoplot(step.back, which = 1:2)
M = lm(Price ~ new_tests + new_tests + new_vaccinations
, data = df_aus)
summary(M)
library(ggfortify)
autoplot(M, which = 1:2)
M = lm(Price ~ new_cases + new_tests + new_vaccinations
, data = df_aus)
summary(M)
library(ggfortify)
autoplot(M, which = 1:2)
M = lm(Price ~ new_cases + new_tests + new_vaccinations
, data = df_aus)
summary(M)
M_Q2 = lm(Price ~ new_tests + new_vaccinations
, data = df_aus)
summary(M_Q2)
library(ggfortify)
autoplot(M_Q2, which = 1:2)
M = lm(Price ~ new_cases + new_tests + new_vaccinations
, data = df_aus)
summary(M)
library(ggfortify)
autoplot(M, which = 1:2)
ggplot(data = df_aus, mapping = aes(x = new_vaccinations, y = Price)) + geom_point() + ggtitle("Prices of stocks against new vaccinations") + xlab("New vaccinations") + ylab("Price")
ggplot(data = df_aus, mapping = aes(x = new_tests, y = Price)) + geom_point() + ggtitle("Prices of stocks against new tests") + xlab("New tests") + ylab("Price")
ggplot(data = df_aus, mapping = aes(x = new_vaccinations, y = log(Price))) + geom_point() + ggtitle("Prices of stocks against new vaccinations") + xlab("New vaccinations") + ylab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M1 = lm(Price ~ poly(new_vaccinations, degree=3), data=df_aus_subset)
summary(M1)
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M1 = lm(Price ~ poly(new_vaccinations, degree=2), data=df_aus_subset)
summary(M1)
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M1 = lm(Price ~ poly(new_vaccinations, degree=3), data=df_aus_subset)
summary(M1)
ggplot(data = df_aus, mapping = aes(x = new_vaccinations, y = Price)) + geom_point() + ggtitle("Prices of stocks against new vaccinations") + xlab("New vaccinations") + ylab("Price")
df_aus_subset = df_aus %>% select(Price, new_vaccinations)
df_aus_subset
M1 = lm(Price ~ poly(new_vaccinations, degree=2), data=df_aus_subset)
summary(M1)
df_aus_subset = df_aus %>% select(Price, new_tests)
df_aus_subset
M2 = lm(Price ~ poly(new_tests, degree=2), data=df_aus_subset)
summary(M2)
ggplot(data = df_aus, mapping = aes(x = new_tests, y = Price)) + geom_point() + ggtitle("Prices of stocks against new tests") + xlab("New tests") + ylab("Price")
M = lm(Price ~ poly(new_tests+new_vaccinations, degree=2), data=df_aus)
summary(M)
M = lm(Price ~ polym(new_tests, new_vaccinations, degree=2, raw=TRUE), data=df_aus)
summary(M)
df_aus$Price_mul30 = df_aus$Price*30
p1 = ggplot(data = df_aus) + geom_line(aes(x=date, y = new_cases), color = "red") + geom_line(aes(x=date, y = new_vaccinations), color = "light green") + geom_line(aes(x=date, y = new_tests), color = "light blue")+ theme_bw()
ggplotly(p1)
autoplot(M, which = 1:2)
M = lm(Price ~ polym(new_tests, new_vaccinations, degree=2, raw=TRUE), data=df_aus)
summary(M)
autoplot(M, which = 1:2)
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = Price), color = "light green") +
geom_point(aes(x = new_vaccinations, y = Price), color = "light blue") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_bw()
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = Price), color = "light green") +
geom_point(aes(x = new_vaccinations, y = Price), color = "light blue") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = Price), color = "light blue") +
geom_point(aes(x = new_vaccinations, y = Price), color = "light green") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
df_aus$logPrice = log(df_aus$Price)
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = logPrice), color = "light blue") +
geom_point(aes(x = new_vaccinations, y = logPrice), color = "light green") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
M = lm(logPrice ~ polym(new_tests, new_vaccinations, degree=2, raw=TRUE), data=df_aus)
summary(M)
autoplot(M, which = 1:2)
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = logPrice), color = "light blue") +
geom_point(aes(x = new_vaccinations, y = logPrice), color = "light green") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
colnames(df_aus)
colnames(df_aus)[7] = 'Change'
M = lm(logPrice ~ polym(new_tests, new_vaccinations, degree=2, raw=TRUE), data=df_aus)
summary(M)
autoplot(M, which = 1:2)
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = Change), color = "light blue") +
geom_point(aes(x = new_vaccinations, y = Change), color = "light green") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
M = lm(logPrice ~ polym(new_tests, new_vaccinations, degree=2, raw=TRUE), data=df_aus)
summary(M)
autoplot(M, which = 1:2)
ggplot(data = df_aus) + geom_point(aes(x = new_tests, y = logPrice), color = "light blue") +
geom_point(aes(x = new_vaccinations, y = logPrice), color = "light green") +
ggtitle("Prices of stocks against new tests and new_vaccinations") + ylab("Price") +theme_classic()
