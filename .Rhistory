ylab("month year") + xlab("average new people vaccinated")
ggplot(covid_temp_new_vaccinated_aggregate, aes(x = number, y= month_year)) +
geom_bar(stat = 'identity') + ggtitle("Average New People Vaccinated (Smoothed) per Month") +
ylab("month year") + xlab("average new people vaccinated")
glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset$Price <- as.numeric(gsub(",","",df_aus_subset$Price))
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
covid = read.csv("owid-covid-data.csv")
# these are indices for each country (an index is just a collection of stocks)
# 'FileEncoding' just cleans the column encoding for this case
sp500 = read.csv("SPY Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for US
TOPIX = read.csv("TOPIX Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Japan
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
NSEI = read.csv("Nifty 50 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for India
SSEC = read.csv("Shanghai Composite Historical Data.csv", fileEncoding = 'UTF-8-BOM') # this is for China
glimpse(covid)
#Dropping NA
covid_clean = covid %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index)
#This code changes the negative case values in the data set to zero
covid_clean$new_cases[covid_clean$new_cases < 0] <- 0
glimpse(covid_clean)
unique(covid_clean$location)
#code for more optimised join (to be pasted later)
# using a copy just in case
covid2 <- covid_clean
sp500$Date = mdy(sp500$Date)
TOPIX$Date = mdy(TOPIX$Date)
ASX200$Date = mdy(ASX200$Date)
NSEI$Date = mdy(NSEI$Date)
SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations)
sp500$Date <- as.character(sp500$Date)
TOPIX$Date <- as.character(TOPIX$Date)
ASX200$Date <- as.character(ASX200$Date)
NSEI$Date <- as.character(NSEI$Date)
SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
covid_IND <- covid2 %>% filter(location == "India")
covid_JPN <- covid2 %>% filter(location == "Japan")
covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
df_1 = inner_join(sp500, covid_US, by = "Date")
df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "Date")
df_4 = inner_join(NSEI, covid_IND, by = "Date")
df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
covid_temp <- covid_clean
covid_temp$month <- strftime(covid_temp$date, "%m")
covid_temp$year  <- strftime(covid_temp$date, "%Y")
covid_temp_new_case_aggregate <- aggregate(new_cases_smoothed~month+year,
covid_temp,
FUN = mean)
covid_temp_new_case_aggregate$month_year <- paste(covid_temp_new_case_aggregate$month, covid_temp_new_case_aggregate$year)
ggplot(covid_temp_new_case_aggregate, aes(x= new_cases_smoothed, y= month_year)) +
geom_bar(stat = 'identity') + ggtitle("Average New Cases (Smoothed) per Month") +
ylab("month year") + xlab("average new cases")
covid_temp = covid_clean %>% select(date,new_people_vaccinated_smoothed)
covid_temp$date <- as.Date(covid_temp$date, format = "%Y-%m-%d")
covid_temp_new_vaccinated_aggregate = covid_temp %>% mutate(month_year = as.character(format(date, "%m-%Y"))) %>%
group_by(month_year) %>%
summarise(date=date[1], number = mean(new_people_vaccinated_smoothed))
covid_temp_new_vaccinated_aggregate
ggplot(covid_temp_new_vaccinated_aggregate, aes(x = number, y= month_year)) +
geom_bar(stat = 'identity') + ggtitle("Average New People Vaccinated (Smoothed) per Month") +
ylab("month year") + xlab("average new people vaccinated")
glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset$Price <- as.numeric(gsub(",","",df_aus_subset$Price))
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
# using a copy just in case
covid2 <- covid_clean
sp500$Date = mdy(sp500$Date)
TOPIX$Date = mdy(TOPIX$Date)
ASX200$Date = mdy(ASX200$Date)
NSEI$Date = mdy(NSEI$Date)
SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations)
sp500$Date <- as.character(sp500$Date)
TOPIX$Date <- as.character(TOPIX$Date)
ASX200$Date <- as.character(ASX200$Date)
NSEI$Date <- as.character(NSEI$Date)
SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
covid_IND <- covid2 %>% filter(location == "India")
covid_JPN <- covid2 %>% filter(location == "Japan")
covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
df_1 = inner_join(sp500, covid_US, by = "Date")
df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "Date")
df_4 = inner_join(NSEI, covid_IND, by = "Date")
df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
#transformation
df_aus$Date = as.Date(df_aus$Date)
df_aus$Price = as.numeric(gsub(",","",df_aus_subset$Price))
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
covid = read.csv("owid-covid-data.csv")
# these are indices for each country (an index is just a collection of stocks)
# 'FileEncoding' just cleans the column encoding for this case
sp500 = read.csv("SPY Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for US
TOPIX = read.csv("TOPIX Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Japan
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
NSEI = read.csv("Nifty 50 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for India
SSEC = read.csv("Shanghai Composite Historical Data.csv", fileEncoding = 'UTF-8-BOM') # this is for China
glimpse(covid)
#Dropping NA
covid_clean = covid %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index)
#This code changes the negative case values in the data set to zero
covid_clean$new_cases[covid_clean$new_cases < 0] <- 0
glimpse(covid_clean)
unique(covid_clean$location)
# using a copy just in case
covid2 <- covid_clean
sp500$Date = mdy(sp500$Date)
TOPIX$Date = mdy(TOPIX$Date)
ASX200$Date = mdy(ASX200$Date)
NSEI$Date = mdy(NSEI$Date)
SSEC$Date = mdy(SSEC$Date)
covid2$date = ymd(covid2$date)
#Temporarily changing the date to character as joining cannot be done with date objects
#Also selecting relevant columns for analysis later
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_deaths, location, new_vaccinations)
sp500$Date <- as.character(sp500$Date)
TOPIX$Date <- as.character(TOPIX$Date)
ASX200$Date <- as.character(ASX200$Date)
NSEI$Date <- as.character(NSEI$Date)
SSEC$Date <- as.character(SSEC$Date)
# renaming column so it has same name as the stock market data frames for joining later
colnames(covid2)[1] = "Date"
# making data frames for each country we select to perform individual joins on each to their respective stock market index
covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
covid_IND <- covid2 %>% filter(location == "India")
covid_JPN <- covid2 %>% filter(location == "Japan")
covid_CHN <- covid2 %>% filter(location == "China")
# performing joins
df_1 = inner_join(sp500, covid_US, by = "Date")
df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "Date")
df_4 = inner_join(NSEI, covid_IND, by = "Date")
df_5 = inner_join(SSEC, covid_CHN, by = "Date")
# vertically joined data set (now one column will store all the values of the respective country index)
# e.g US stores prices relevant to S&P500 and China's prices are relevant to the the SSEC which is based in Shanghai.
covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
# Still need transform relevant column to numeric ect...will do a little later
df_aus <- df_3
#transformation
df_aus$Date = as.Date(df_aus$Date)
df_aus$Price = as.numeric(gsub(",","",df_aus_subset$Price))
df_aus
covid_temp <- covid_clean
covid_temp$month <- strftime(covid_temp$date, "%m")
covid_temp$year  <- strftime(covid_temp$date, "%Y")
covid_temp_new_case_aggregate <- aggregate(new_cases_smoothed~month+year,
covid_temp,
FUN = mean)
covid_temp_new_case_aggregate$month_year <- paste(covid_temp_new_case_aggregate$month, covid_temp_new_case_aggregate$year)
ggplot(covid_temp_new_case_aggregate, aes(x= new_cases_smoothed, y= month_year)) +
geom_bar(stat = 'identity') + ggtitle("Average New Cases (Smoothed) per Month") +
ylab("month year") + xlab("average new cases")
covid_temp = covid_clean %>% select(date,new_people_vaccinated_smoothed)
covid_temp$date <- as.Date(covid_temp$date, format = "%Y-%m-%d")
covid_temp_new_vaccinated_aggregate = covid_temp %>% mutate(month_year = as.character(format(date, "%m-%Y"))) %>%
group_by(month_year) %>%
summarise(date=date[1], number = mean(new_people_vaccinated_smoothed))
covid_temp_new_vaccinated_aggregate
ggplot(covid_temp_new_vaccinated_aggregate, aes(x = number, y= month_year)) +
geom_bar(stat = 'identity') + ggtitle("Average New People Vaccinated (Smoothed) per Month") +
ylab("month year") + xlab("average new people vaccinated")
glimpse(df_aus)
df_aus_subset = df_aus %>% select(Price, new_cases)
df_aus_subset
M0 = lm(Price ~ new_cases, data = df_aus_subset) # Null model
summary(M0)
View(df_aus_subset)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
library(ggplot2)
library(maps)
install.packages('ggplot2')
install.packages('maps')
library(plotly)
install.packages('plotly')
install.packages('caret')
install.packages('dplyr')
library(dplyr)
install.packages('tidyverse')
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
covid = read.csv("owid-covid-data.csv")
# these are indices for each country (an index is just a collection of stocks)
# 'FileEncoding' just cleans the column encoding for this case
#sp500 = read.csv("SPY Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for US
#TOPIX = read.csv("TOPIX Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Japan
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
#Dropping NA
covid_clean = covid %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths)
#This code changes the negative case values in the data set to zero
covid_clean$new_cases[covid_clean$new_cases < 0] <- 0
glimpse(covid_clean)
unique(covid_clean$location)
slotnames(ASX200)
slotNames(ASX200)
ASX200
covid_AUS
df_aus
dftest = sort(df_aus$Date)
dftest = sort(df_aus$Date)
dftest
sort(df_aus)
sort(df_aus$Date)
df_aus
df_aus[order(-df_aus$Date)]
df_aus[order(as.Date(-df_aus$Date, format = "%m/%d/%Y")]
df_aus[order(as.Date(-df_aus$Date, format = "%m/%d/%Y"))]
df %>% arrange(mdy(df_aus$Date))
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(lubridate)
library(dplyr)
#sort from least recent to most recent
df %>% arrange(mdy(df$date))
library(lubridate)
library(dplyr)
#sort from least recent to most recent
df %>% arrange(mdy(df_aus$date))
library(lubridate)
library(dplyr)
#sort from least recent to most recent
df %>% arrange(mdy(df_aus$Date))
library(lubridate)
library(dplyr)
#sort from least recent to most recent
data[order(as.Date(df_aus$Date, format="%m/%d/%Y")),]
df_aus
as.Date(df_aus$Date, format="%d/%m/%Y")
order(as.Date(d$V3, format="%d/%m/%Y"))
order(as.Date(df_aus$Date, format="%d/%m/%Y"))
df_aus[order(as.Date(df_aus$Date, format="%d/%m/%Y")),]
df_aus[order(as.Date(df_aus$Date, format="%d/%m/%Y")),]
df_aus
df_aus = df_aus[order(as.Date(df_aus$Date, format="%d/%m/%Y")),]
df_aus
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
options(scipen=7)
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Main title",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
df_aus = df_aus[order(as.Date(df_aus$Date, format="%d/%m/%Y")),]
df_aus
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
xlab = "X axis title", ylab = "Y axis title",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
x <- df_aus$Price
y <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
xlab = "Price", ylab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
y <- df_aus$Price
x <- df_aus$new_cases
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
# Add regression line
plot(x, y, main = "Price ~ New Cases",
ylab = "Price", xlab = "new_cases",
pch = 19, frame = FALSE)
abline(lm(y ~ x, data = df_aus), col = "blue")
help(matrix)
B=1000; n=10
x = rexp(n*B, rate=1)
x.exp = matrix(x, nrow = B, ncol = n)
x.exp
B=1000; n=10
x = rexp(n*B, rate=1)
x.exp = matrix(x, nrow = B, ncol = n)
#x.exp
ret = apply(x.exp, min, 1)
ret = apply(x.exp, 1, min)
ret
ret = apply(x.exp, 1, min)
#ret
hist(x.min, prob=TRUE)
x.min = apply(x.exp, 1, min)
#ret
hist(x.min, prob=TRUE)
curve(dexp(x,rate=1), add=T)
#plot(W.obs-0.1,P.obs,type="h",xlim=c(0,m+n),ylim=c(0,0.2), xlab="Observed values", ylab="Relative frequencies")
#We offset W.obs slightly for visual clarity.
#points(0:(m+n),dbinom(0:(m+n),m+n,p=1/3),type="h",col=2)
#legend("topright", legend=c("empirical freq","theoretical freq"),
#lty=1,col=1:2)
hist(x.min, prob=TRUE, main = "distribution of x.min", ylab = "Counts")
curve(dexp(x,rate=1), add=T)
#plot(W.obs-0.1,P.obs,type="h",xlim=c(0,m+n),ylim=c(0,0.2), xlab="Observed values", ylab="Relative frequencies")
#We offset W.obs slightly for visual clarity.
#points(0:(m+n),dbinom(0:(m+n),m+n,p=1/3),type="h",col=2)
#legend("topright", legend=c("empirical freq","theoretical freq"),
#lty=1,col=1:2)
hist(x.min, prob=TRUE, main = "Distribution of x.min", ylab = "Counts")
curve(dexp(x,rate=1), add=T, col = "red")
#plot(W.obs-0.1,P.obs,type="h",xlim=c(0,m+n),ylim=c(0,0.2), xlab="Observed values", ylab="Relative frequencies")
#We offset W.obs slightly for visual clarity.
#points(0:(m+n),dbinom(0:(m+n),m+n,p=1/3),type="h",col=2)
#legend("topright", legend=c("empirical freq","theoretical freq"),
#lty=1,col=1:2)
hist(x.min, prob=TRUE, main = "Distribution of x.min", ylab = "Counts")
curve(dexp(x,rate=1), add=T, col = "blue")
hist(x.min, prob=TRUE, main = "Distribution of x.min", ylab = "Counts")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 0.5)
hist(x.min, prob=TRUE, main = "Distribution of x.min", ylab = "Counts")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
view(x.min)
x.min
help(hist)
hist(x.min, prob=TRUE, main = "Probability density of x.min (observed and theoretical values")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 100, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 50, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 60, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 25, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 40, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=1), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 40, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 40, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=8), add=T, col = "blue", lwd = 2)
set.seed(2011)
B=1000; n=10
x = rexp(n*B, rate=1)
x.exp = matrix(x, nrow = B, ncol = n)
#x.exp
x.min = apply(x.exp, 1, min)
#x.min
hist(x.min, prob=TRUE, breaks = 40, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 10, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 30, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 100, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
hist(x.min, prob=TRUE, breaks = 50, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
set.seed(2011)
B=1000; n=10
x = rexp(n*B, rate=1)
x.exp = matrix(x, nrow = B, ncol = n)
#x.exp
x.min = apply(x.exp, 1, min)
#x.min
hist(x.min, prob=TRUE, breaks = 50, main = "Probability density of x.min (observed and theoretical values)")
curve(dexp(x,rate=10), add=T, col = "blue", lwd = 2)
