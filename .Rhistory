to = '2018-03-01',
get = 'stock.prices')
ret_data <- price_data %>%
group_by(symbol) %>%
tq_transmute(select = adjusted,
mutate_fun = periodReturn,
period = "daily",
col_rename = "ret")
port_ret_tidyquant <- ret_data %>%
tq_portfolio(assets_col = symbol,
returns_col = ret,
weights = wts,
col_rename = 'port_ret',
geometric = FALSE)
df_q2_scatter_plot_Lprice_var_fac = function(plot_df, xvar, xvar_lab, title) {
p1 = ggplot(data = plot_df, aes(x = xvar, group=location, color = location)) +
geom_point(aes(y=Lprice)) +
facet_grid(location ~ .) +
ggtitle(title) + xlab(xvar_lab) +
ylab("Price") +
theme_bw()
p1
}
df_q2$Lprice = log(df_q2$Price/lag(df_q2$Price))
df_q2$Lnew_vaccinations = log(df_q2$new_vaccinations/lag(df_q2$new_vaccinations))
df_q2$Lnew_tests = log(df_q2$new_tests/lag(df_q2$new_tests))
df_q2$Lnew_cases = log(df_q2$new_cases/lag(df_q2$new_cases))
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_tests, "new_tests", "log return(Price)~Log return(new_tests)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_vaccinations, "new_vaccinations", "Log return(Price)~Log return(new_vaccinations)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_cases, "new_vaccinations", "Log return(Price)~Log return(new_cases)")
#colnames(df_q2)
df_q2_date = df_q2 %>% drop_na(new_cases, new_tests, new_vaccinations) %>% group_by(Date) %>% summarize(avg_price = mean(Price), avg_new_cases = mean(new_cases), avg_new_tests = mean(new_tests), avg_new_vac = mean(new_vaccinations))
p1 = ggplot(data = df_q2_date, aes(x = Date)) + geom_line(aes(y=avg_new_cases), color = 'red') +
geom_line(aes(y=avg_new_vac), color = 'light green') +
geom_line(aes(y=avg_new_tests), color = 'light blue') +
ggtitle("covid data plot") + xlab("date") +
ylab("values")+
theme_bw()
ggplotly(p1)
df_q2_cor = df_q2 %>% drop_na(new_vaccinations, new_tests, new_cases, Price) %>% select(new_vaccinations, new_tests, new_cases, Price)
cor(df_q2_cor)
qtlcharts::iplotCorr(df_q2_cor)
#covid_clean
df_q2_beta = df_q2 %>% drop_na(Lprice2, Lnew_cases2)
df_q2_cor = df_q2 %>% drop_na(new_vaccinations, new_tests, new_cases, Price) %>% select(new_vaccinations, new_tests, new_cases, Price)
cor(df_q2_cor)
qtlcharts::iplotCorr(df_q2_cor)
wts_tbl <- tibble(symbol = tickers,
wts = wts)
ret_data <- left_join(ret_data,wts_tbl, by = 'symbol')
ret_data <- ret_data %>%
mutate(wt_return = wts * ret)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
mySymbols <- c('AMZN', '^GSPC','NFLX','MSFT','GOOG','NVAX','DIS','WMT','COST','V','FB','AXP','CMCSA','PFE','MRNA')
myStocks <-lapply(mySymbols, function(x) {getSymbols(x, src = "yahoo",
from = "2020-01-01",
to = "2022-04-04",
periodicity = "daily",
auto.assign=FALSE)} )
df_q2_scatter_plot_Lprice_var_fac = function(plot_df, xvar, xvar_lab, title) {
p1 = ggplot(data = plot_df, aes(x = xvar, group=location, color = location)) +
geom_point(aes(y=Lprice)) +
facet_grid(location ~ .) +
ggtitle(title) + xlab(xvar_lab) +
ylab("Price") +
theme_bw()
p1
}
df_q2$Lprice = log(df_q2$Price/lag(df_q2$Price))
df_q2$Lnew_vaccinations = log(df_q2$new_vaccinations/lag(df_q2$new_vaccinations))
df_q2$Lnew_tests = log(df_q2$new_tests/lag(df_q2$new_tests))
df_q2$Lnew_cases = log(df_q2$new_cases/lag(df_q2$new_cases))
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_tests, "new_tests", "log return(Price)~Log return(new_tests)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_vaccinations, "new_vaccinations", "Log return(Price)~Log return(new_vaccinations)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_cases, "new_vaccinations", "Log return(Price)~Log return(new_cases)")
covid = read.csv("owid-covid-data.csv")
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
df_q2 = covid_joined
colnames(df_q2)[7] = 'Change'
write.csv(df_q2,"df_q2.csv")
df_q2_scatter_plot_Lprice_var_fac = function(plot_df, xvar, xvar_lab, title) {
p1 = ggplot(data = plot_df, aes(x = xvar, group=location, color = location)) +
geom_point(aes(y=Lprice)) +
facet_grid(location ~ .) +
ggtitle(title) + xlab(xvar_lab) +
ylab("Price") +
theme_bw()
p1
}
df_q2$Lprice = log(df_q2$Price/lag(df_q2$Price))
df_q2$Lnew_vaccinations = log(df_q2$new_vaccinations/lag(df_q2$new_vaccinations))
df_q2$Lnew_tests = log(df_q2$new_tests/lag(df_q2$new_tests))
df_q2$Lnew_cases = log(df_q2$new_cases/lag(df_q2$new_cases))
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_tests, "new_tests", "log return(Price)~Log return(new_tests)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_vaccinations, "new_vaccinations", "Log return(Price)~Log return(new_vaccinations)")
df_q2_scatter_plot_Lprice_var_fac(df_q2, df_q2$Lnew_cases, "new_vaccinations", "Log return(Price)~Log return(new_cases)")
df_q2_cor = df_q2 %>% drop_na(new_vaccinations, new_tests, new_cases, Price) %>% select(new_vaccinations, new_tests, new_cases, Price)
cor(df_q2_cor)
qtlcharts::iplotCorr(df_q2_cor)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
glm1= glm(Price ~ new_vaccinations + new_tests + new_cases,data = df_q2_cor)
summary(glm1)
plot(glm1, which = 1:2)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
library(caret)
library(klaR)
# load the library
library(caret)
# define training control
train_control <- trainControl(method="boot", number=100)
# train the model
model <- train(level~., data=df_q2_cor, trControl=train_control, method="nb")
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
library(caret)
library(klaR)
covid = read.csv("owid-covid-data.csv")
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM') # This is for Australia
df_q2 = covid_joined
colnames(df_q2)[7] = 'Change'
write.csv(df_q2,"df_q2.csv")
glm1= glm(Price ~ new_vaccinations + new_tests + new_cases,data = df_q2_cor)
summary(glm1)
plot(glm1, which = 1:2)
mean(df_q2_cor$Price)
median(df_q2_cor$Price)
quantile(df_q2_cor$Price, 0.25)
#df_q2_cor$level <- ifelse(df_q2_cor$Price < 1978.28, "low", "high")
df_q2_cor <- df_q2_cor %>% mutate(level = case_when((df_q2_cor$Price <= 1978.28) ~ "Low",
((df_q2_cor$Price > 1978.28) & (df_q2_cor$Price < 6511.446)) ~ "Medium",
(df_q2_cor$Price > 6511.446) ~ "High"
))
df_q2_cor
set.seed(1)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
# define training control
train_control <- trainControl(method="cv", number=10)
# train the model
model <- train(df_q2_cor$level~., data=df_q2_cor, trControl=train_control, method="nb")
# define training control
train_control <- trainControl(method="cv", number=10)
# train the model
model <- train(df_q2_cor$level~., data=df_q2_cor, trControl=train_control, method="nb")
table(df_q2_cor$level)
df_q2_cor$level <- as.factor(df_q2_cor$level)
df_q2_cor
# load the library
library(caret)
# define training control
train_control <- trainControl(method="boot", number=100)
# train the model
model <- train(level~., data=df_q2_cor, trControl=train_control, method="nb")
# summarize results
print(model)
model$finalModel
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(level~., data=df_q2_cor, trControl=train_control, method="nb")
# summarize results
print(model)
set.seed(1)
df_q2_cor$level <- as.factor(df_q2_cor$level)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
set.seed(1)
df_q2_cor$level <- as.factor(df_q2_cor$level)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
set.seed(1)
df_q2_cor$level <- as.factor(df_q2_cor$level)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
set.seed(1)
df_q2_cor$level <- as.factor(df_q2_cor$level)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
set.seed(1)
df_q2_cor$level <- as.factor(df_q2_cor$level)
split = 0.8
## 80% 20% train/test
trainIndex <- createDataPartition(df_q2_cor$level, p = split, list = FALSE)
data_train <- df_q2_cor[trainIndex, ]
data_test <- df_q2_cor[-trainIndex, ]
##naive bayes model
model = train(df_q2_cor$level ~ df_q2_cor$new_vaccinations+df_q2_cor$new_tests+df_q2_cor$new_cases+df_q2_cor$Price, data = data_train)
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
# summarize results
print(model)
View(M0)
model$modelInfo
model$results
model$results$Accuracy
boxplot(model$results$Accuracy)
boxplot(model$results$Accuracy, xlab = "knn")
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model_knn <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
# summarize results
print(model_knn)
boxplot(model_knn$results$Accuracy, xlab = "knn")
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=5)
# train the model
model_knn <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
# summarize results
print(model_knn)
boxplot(model_knn$results$Accuracy, xlab = "knn")
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model_knn <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
# summarize results
print(model_knn)
boxplot(model_knn$results$Accuracy, xlab = "knn")
boxplot(model_knn$results$Accuracy, xlab = "knn")
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model_knn <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
# summarize results
print(model_knn)
boxplot(model_knn$results$Accuracy, xlab = "knn")
View(price_data)
boxplot(model_knn$results$Accuracy, xlab = "knn", horizontal = TRUE)
boxplot(model_knn$results$Accuracy, ylab = "knn",xlab = "Accuracy", horizontal = TRUE)
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters, median_age, extreme_poverty, total_vaccinations, new_deaths, new_tests, weekly_icu_admissions_per_million, weekly_icu_admissions)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters, median_age, extreme_poverty, total_vaccinations, new_deaths, new_tests, weekly_icu_admissions_per_million, weekly_icu_admissions)
cov_clean$new_cases[cov_clean$new_cases < 0] <- 0
cov_AUS <- cov %>% filter(location == "Australia")
cov_clean_AUS = cov_AUS %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters, median_age, extreme_poverty, total_vaccinations, new_deaths, new_tests)
cov_AUS
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov_clean$new_cases[cov_clean$new_cases < 0] <- 0
cov_AUS <- cov %>% filter(location == "Australia")
cov_clean_AUS = cov_AUS %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov_AUS
cov <- read.csv('owid-covid-data.csv')
cov_clean = cov %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov_clean$new_cases[cov_clean$new_cases < 0] <- 0
cov_AUS <- cov %>% filter(location == "Australia")
cov_clean_AUS = cov_AUS %>% drop_na(new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
cov_clean_AUS
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, total_tests, total_cases)
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, total_tests, total_cases)
covid2 <- covid2 %>%
transform(covid2, date = as.character(date)) %>%
select(date, new_cases, new_vaccinations, new_vaccinations_smoothed_per_million, population, population_density, total_boosters)
covid2
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, total_tests, total_cases)
date <- covid_clean_AUS$date
booster <- covid_clean_AUS$total_boosters
df <- data.frame(date, booster)
print (df)
covod <- read.csv('owid-covid-data.csv')
covid <- read.csv('owid-covid-data.csv')
covid <- read.csv('owid-covid-data.csv')
covid <- read.csv('owid-covid-data.csv')
covid <- read.csv('owid-covid-data.csv')
covid <- read.csv('owid-covid-data.csv')
getwd()
# covid <- read.csv('owid-covid-data.csv')
"/Users/jasminecai/Desktop/DATA 3888/covid_p11/covid_p11/owid-covid-data.csv"
library(readr)
owid_covid_data <- read_csv("~/Desktop/DATA 3888/Quiz /QUIZ/owid-covid-data.csv")
View(owid_covid_data)
covid <- read.csv('owid-covid-data.csv')
open(owid_covid_data)
covid <- owid_covid_data
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, total_tests, total_cases)
date <- covid_clean_AUS$date
booster <- covid_clean_AUS$total_boosters
df <- data.frame(date, booster)
print (df)
covid <- owid_covid_data
covid <- owid_covid_data
covid
covid <- read('owid_covid_data')
covid <- open('owid_covid_data')
covid_AUS <- covid %>% filter(location == "Australia")
covid_clean_AUS = covid_AUS %>% drop_na(new_cases, new_cases_smoothed, new_vaccinations, new_vaccinations_smoothed, new_vaccinations_smoothed_per_million, population, population_density, median_age, extreme_poverty, total_vaccinations, hospital_beds_per_thousand, human_development_index, new_deaths, new_tests, total_tests, total_cases)
date <- covid_clean_AUS$date
booster <- covid_clean_AUS$total_boosters
df <- data.frame(date, booster)
print (df)
date <- covid_clean_AUS$date
booster <- covid_clean_AUS$total_boosters
df <- data.frame(date, booster)
print (df)
covid = read.csv("owid-covid-data.csv")
View(df)
View(df)
# Data input and processing
options(htmltools.dir.version = FALSE)
library(tidyverse)
library(ggplot2)
library(maps)
library(plotly)
library(caret)
library(dplyr)
library(lubridate)
library(scales)
library(magrittr)
library(tidyr)
library(pkr)
library(plotly)
library(ggthemes)
library(tseries)
library(quantmod)
library(roll)
library(plotly)
library(gganimate)
library(tidyquant)
library(caret)
library(klaR)
library(zoo)
covid = read.csv("owid-covid-data.csv")
sp500 = read.csv("SPY Historical Data.csv", fileEncoding = 'UTF-8-BOM')
TOPIX = read.csv("TOPIX Historical Data.csv", fileEncoding = 'UTF-8-BOM')
ASX200 = read.csv("S&P_ASX 200 Historical Data.csv", fileEncoding = 'UTF-8-BOM')
NSEI = read.csv("Nifty 50 Historical Data.csv", fileEncoding = 'UTF-8-BOM')
SSEC = read.csv("Shanghai Composite Historical Data.csv", fileEncoding = 'UTF-8-BOM')
covid2 <- covid
covid2$date = as.character(ymd(covid2$date))
sp500$Date <- as.character(mdy(sp500$Date))
TOPIX$Date <- as.character(mdy(TOPIX$Date))
ASX200$Date <- as.character(mdy(ASX200$Date))
NSEI$Date <- as.character(mdy(NSEI$Date))
SSEC$Date <- as.character(mdy(SSEC$Date))
colnames(covid2)[4] = "Date"
covid_US <- covid2 %>% filter(location == "United States")
covid_AUS <- covid2 %>% filter(location == "Australia")
covid_IND <- covid2 %>% filter(location == "India")
covid_JPN <- covid2 %>% filter(location == "Japan")
covid_CHN <- covid2 %>% filter(location == "China")
df_1 = inner_join(sp500, covid_US, by = "Date")
df_2 = inner_join(TOPIX, covid_JPN, by = "Date")
df_3 = inner_join(ASX200, covid_AUS, by = "Date")
df_4 = inner_join(NSEI, covid_IND, by = "Date")
df_5 = inner_join(SSEC, covid_CHN, by = "Date")
covid_joined <- rbind(df_1, df_2, df_3, df_4, df_5)
covid_joined$Date <- ymd(covid_joined$Date)
covid_joined$Price <- as.numeric(gsub(",","",covid_joined$Price))
covid_joined$Open <- as.numeric(gsub(",","",covid_joined$Open))
covid_joined$High <- as.numeric(gsub(",","",covid_joined$High))
covid_joined$Low <- as.numeric(gsub(",","",covid_joined$Low))
covid_joined$Change.. <- as.numeric(gsub("%","",covid_joined$Change..))
covid_joined <- covid_joined %>%
filter(Date >= "2020-03-11") %>%
mutate(Year_category = case_when(
Date >= "2020-03-11" & Date < "2021-01-01" ~ "1st year",
Date >= "2021-01-01" & Date < "2022-01-01" ~ "2nd year",
Date >= "2022-01-01" & Date < "2023-01-01" ~ "3rd year (ongoing)"))
fig <- plot_ly(covid_joined, x = ~Change.., y = ~location, color = ~Year_category, type = "box") %>% layout(boxmode = "group", title = 'Distribution of gains and losses over the pandemic',
xaxis = list(showgrid = TRUE),
yaxis = list(showgrid = TRUE))
unique(covid_joined$location)
df_q2 = covid_joined
colnames(df_q2)[7] = 'Change'
write.csv(df_q2,"df_q2.csv")
df_q2 = as.data.frame(df_q2[order(df_q2$Date),]) %>% drop_na(new_vaccinations, new_tests, new_cases, Price)
df_q2_cor = df_q2 %>% dplyr::select(new_vaccinations, new_tests, new_cases, Price)
cor(df_q2_cor)
qtlcharts::iplotCorr(df_q2_cor)
mean(df_q2_cor$Price)
median(df_q2_cor$Price)
quantile(df_q2_cor$Price, 0.25)
df_q2_cor <- df_q2_cor %>% mutate(level = case_when((df_q2_cor$Price <= 1978.28) ~ "Low",
((df_q2_cor$Price > 1978.28) & (df_q2_cor$Price < 6511.446)) ~ "Medium",
(df_q2_cor$Price > 6511.446) ~ "High"
))
df_q2_cor$level <- as.factor(df_q2_cor$level)
# define training control
train_control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model_knn <- train(level~., data=df_q2_cor, trControl=train_control, method="knn")
#model_rpart <- train(level~., data=df_q2_cor, trControl=train_control, method="rpart")
model_pls <- train(level~., data=df_q2_cor, trControl=train_control, method="pls")
